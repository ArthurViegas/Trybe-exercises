{"ast":null,"code":"var _jsxFileName = \"/home/arthur/Documents/Trybe-exercises/Trybe Projects/M2-Front-End/TrybeWallet/src/components/SpendingsTable.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TableHeader from './TableHeader';\nimport '../assets/css/spendingTable.css';\nimport { saveExpense, sumExpensies } from '../actions';\nimport convertValues from '../helpers/conversor'; // FONTE: Consultei o repositório do Davi Soares T15 B, para realizar parte do requisito, adaptei sua lógica de implementação e utilizei as funções de conversão\n// LINK: https://github.com/tryber/sd-015-b-project-trybewallet/commit/5919b5cf9bc0b8d2196c486f81a24d9c9a5a333f\n\nclass SpendigsTable extends React.Component {\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     id: 0,\n  //     value: '',\n  //     description: '',\n  //     currency: 'USD',\n  //     method: 'Dinheiro',\n  //     tag: 'Alimentação',\n  //     exchangeRates: {},\n  //     currNames: [],\n  //     totalSpendings: 0,\n  //   };\n  //   this.sumValues = this.sumValues.bind(this);\n  // }\n  formatMonetaryValue(strOrNumber) {\n    return `${Number(strOrNumber).toLocaleString('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    })}`;\n  }\n\n  convertToBRL(exchangeRates, currency, value) {\n    const currenciesObj = Object.values(exchangeRates);\n    const findExchangeRate = currenciesObj.find(find => find.code === currency);\n    return findExchangeRate.ask * value;\n  }\n\n  findCurrency(exchangeRates, currency) {\n    const currenciesObj = Object.values(exchangeRates);\n    const findExchangeRate = currenciesObj.find(find => find.code === currency);\n    const exchangeRate = this.formatMonetaryValue(findExchangeRate.ask);\n    return exchangeRate;\n  }\n\n  usedCurrency(currency, exchangeRates) {\n    const currName = exchangeRates[currency].name;\n    return currName.split('/')[0];\n  }\n\n  deleteButton({\n    target\n  }) {\n    const row = target.closest('tr');\n    row.remove();\n  }\n\n  sumValues() {\n    const {\n      totalExpenses,\n      sumExpensies: allExpensies\n    } = this.props;\n    const convertedValues = convertValues(totalExpenses);\n    const sum = convertedValues.reduce((prev, curr) => prev + curr); // this.setState({\n    //   totalSpendings: sum,\n    //   value: '',\n    // });\n\n    allExpensies(sum);\n  }\n\n  rederExpenseRow(expense) {\n    const {\n      id,\n      description,\n      tag,\n      method,\n      value,\n      currency,\n      exchangeRates\n    } = expense;\n    const valueToReal = `${Number(value).toLocaleString('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    })}`;\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, valueToReal), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, \"Real\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, this.formatMonetaryValue(this.convertToBRL(exchangeRates, currency, value))), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, this.usedCurrency(currency, exchangeRates)), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, this.findCurrency(exchangeRates, currency)), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, method), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, tag), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, description), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.deleteButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, \"Remover\"));\n  }\n\n  render() {\n    const {\n      expenses\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-styles\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      cellPadding: \"2px px\",\n      cellSpacing: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TableHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, expenses.map(expense => this.rederExpenseRow(expense)))));\n  }\n\n}\n\nSpendigsTable.propTypes = {\n  expenses: PropTypes.arrayOf(Object).isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  addExpenses: state => dispatch(saveExpense(state)),\n  sumExpensies: state => dispatch(sumExpensies(state))\n});\n\nconst mapStateToProps = state => ({\n  expenses: state.wallet.expenses\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpendigsTable);","map":{"version":3,"sources":["/home/arthur/Documents/Trybe-exercises/Trybe Projects/M2-Front-End/TrybeWallet/src/components/SpendingsTable.js"],"names":["React","PropTypes","connect","TableHeader","saveExpense","sumExpensies","convertValues","SpendigsTable","Component","formatMonetaryValue","strOrNumber","Number","toLocaleString","style","currency","convertToBRL","exchangeRates","value","currenciesObj","Object","values","findExchangeRate","find","code","ask","findCurrency","exchangeRate","usedCurrency","currName","name","split","deleteButton","target","row","closest","remove","sumValues","totalExpenses","allExpensies","props","convertedValues","sum","reduce","prev","curr","rederExpenseRow","expense","id","description","tag","method","valueToReal","render","expenses","map","propTypes","arrayOf","isRequired","mapDispatchToProps","dispatch","addExpenses","state","mapStateToProps","wallet"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TableHeader from './TableHeader';\nimport '../assets/css/spendingTable.css';\nimport { saveExpense, sumExpensies } from '../actions';\nimport convertValues from '../helpers/conversor';\n// FONTE: Consultei o repositório do Davi Soares T15 B, para realizar parte do requisito, adaptei sua lógica de implementação e utilizei as funções de conversão\n// LINK: https://github.com/tryber/sd-015-b-project-trybewallet/commit/5919b5cf9bc0b8d2196c486f81a24d9c9a5a333f\n\nclass SpendigsTable extends React.Component {\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     id: 0,\n  //     value: '',\n  //     description: '',\n  //     currency: 'USD',\n  //     method: 'Dinheiro',\n  //     tag: 'Alimentação',\n  //     exchangeRates: {},\n  //     currNames: [],\n  //     totalSpendings: 0,\n  //   };\n  //   this.sumValues = this.sumValues.bind(this);\n  // }\n\n  formatMonetaryValue(strOrNumber) {\n    return `${Number(strOrNumber)\n      .toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\n  }\n\n  convertToBRL(exchangeRates, currency, value) {\n    const currenciesObj = Object.values(exchangeRates);\n    const findExchangeRate = currenciesObj.find((find) => find.code === currency);\n\n    return (findExchangeRate.ask * value);\n  }\n\n  findCurrency(exchangeRates, currency) {\n    const currenciesObj = Object.values(exchangeRates);\n    const findExchangeRate = currenciesObj.find((find) => find.code === currency);\n    const exchangeRate = this.formatMonetaryValue(findExchangeRate.ask);\n\n    return exchangeRate;\n  }\n\n  usedCurrency(currency, exchangeRates) {\n    const currName = exchangeRates[currency].name;\n    return currName.split('/')[0];\n  }\n\n  deleteButton({ target }) {\n    const row = target.closest('tr');\n    row.remove();\n  }\n\n  sumValues() {\n    const { totalExpenses, sumExpensies: allExpensies } = this.props;\n    const convertedValues = convertValues(totalExpenses);\n    const sum = convertedValues.reduce((prev, curr) => prev + curr);\n\n    // this.setState({\n    //   totalSpendings: sum,\n    //   value: '',\n    // });\n    allExpensies(sum);\n  }\n\n  rederExpenseRow(expense) {\n    const { id, description, tag, method, value, currency, exchangeRates } = expense;\n    const valueToReal = `${Number(value)\n      .toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\n    return (\n      <tr key={ id }>\n        <td>{ valueToReal }</td>\n        <td>\n          Real\n        </td>\n        <td>\n          { this.formatMonetaryValue(\n            this.convertToBRL(exchangeRates, currency, value),\n          ) }\n        </td>\n        <td>{ this.usedCurrency(currency, exchangeRates) }</td>\n        <td>{ this.findCurrency(exchangeRates, currency) }</td>\n        <td>{ method }</td>\n        <td>{ tag }</td>\n        <td>{ description }</td>\n        <button\n          type=\"button\"\n          onClick={ this.deleteButton }\n        >\n          Remover\n        </button>\n      </tr>\n    );\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <div className=\"table-styles\">\n        <table cellPadding=\"2px px\" cellSpacing=\"2\">\n          <TableHeader />\n          <tbody>\n            { expenses.map((expense) => this.rederExpenseRow(expense)) }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nSpendigsTable.propTypes = {\n  expenses: PropTypes.arrayOf(Object).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  addExpenses: (state) => dispatch(saveExpense(state)),\n  sumExpensies: (state) => dispatch(sumExpensies(state)),\n});\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpendigsTable);\n"]},"metadata":{},"sourceType":"module"}