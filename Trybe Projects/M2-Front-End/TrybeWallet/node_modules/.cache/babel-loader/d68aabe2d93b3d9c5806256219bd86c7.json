{"ast":null,"code":"var _jsxFileName = \"/home/arthur/Documents/trybe-projects/02-front-end/b15-trybeWallet/sd-015-b-project-trybewallet/src/components/SpendingsTable.js\";\n\n/* eslint-disable react/prop-types */\nimport React from 'react'; // import PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { currencies } from '../helpers/payment'; // import '../assets/css/header.css';\n\nclass SpendigsTable extends React.Component {\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //   };\n  // }\n  // Fonte: Consultei o repositório do Davi Soares, utilizei de sua lógica e reaproveitei suas funções de conversão do valor;\n  formatMonetaryValue(strOrNumber) {\n    return `${Number(strOrNumber).toFixed(2)}`;\n  }\n\n  convertToBRL(exchangeRates, currency, value) {\n    const findExchangeRate = exchangeRates.find(find => find.code === currency); // console.log(findExchangeRate);\n\n    return findExchangeRate.ask * value;\n  }\n\n  rederExpenseRow(expense) {\n    const {\n      id,\n      description,\n      tag,\n      method,\n      value,\n      currency,\n      exchangeRates\n    } = expense;\n    console.log(description);\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, description), \" */}\");\n  }\n\n  render() {\n    const {\n      allExpenses\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, \"Descri\\xE7\\xE3o\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, \"Tag\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, \"M\\xE9todo de pagamento\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, \"Valor\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, \"Moeda\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, \"C\\xE2mbio utilizado\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, \"Valor convertido\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, \"Moeda de convers\\xE3o\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, \"Editar/Excluir\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, allExpenses.map(expense => this.rederExpenseRow(expense))));\n  }\n\n} // SpendigsTable.propTypes = {\n//   userEmail: PropTypes.string.isRequired,\n//   totalExpenses: PropTypes.func.isRequired,\n// };\n\n\nconst mapStateToProps = state => ({\n  allExpenses: state.wallet.expenses // totalExpenses: state.wallet.expensesSum,\n\n});\n\nexport default connect(mapStateToProps, null)(SpendigsTable);","map":{"version":3,"sources":["/home/arthur/Documents/trybe-projects/02-front-end/b15-trybeWallet/sd-015-b-project-trybewallet/src/components/SpendingsTable.js"],"names":["React","connect","currencies","SpendigsTable","Component","formatMonetaryValue","strOrNumber","Number","toFixed","convertToBRL","exchangeRates","currency","value","findExchangeRate","find","code","ask","rederExpenseRow","expense","id","description","tag","method","console","log","render","allExpenses","props","map","mapStateToProps","state","wallet","expenses"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,oBAA3B,C,CACA;;AAEA,MAAMC,aAAN,SAA4BH,KAAK,CAACI,SAAlC,CAA4C;AAC1C;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,mBAAmB,CAACC,WAAD,EAAc;AAC/B,WAAQ,GAAEC,MAAM,CAACD,WAAD,CAAN,CAAoBE,OAApB,CAA4B,CAA5B,CAA+B,EAAzC;AACD;;AAEDC,EAAAA,YAAY,CAACC,aAAD,EAAgBC,QAAhB,EAA0BC,KAA1B,EAAiC;AAC3C,UAAMC,gBAAgB,GAAGH,aAAa,CAACI,IAAd,CAAoBA,IAAD,IAAUA,IAAI,CAACC,IAAL,KAAcJ,QAA3C,CAAzB,CAD2C,CAE3C;;AACA,WAAQE,gBAAgB,CAACG,GAAjB,GAAuBJ,KAA/B;AACD;;AAEDK,EAAAA,eAAe,CAACC,OAAD,EAAU;AACvB,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA,WAAN;AAAmBC,MAAAA,GAAnB;AAAwBC,MAAAA,MAAxB;AAAgCV,MAAAA,KAAhC;AAAuCD,MAAAA,QAAvC;AAAiDD,MAAAA;AAAjD,QAAmEQ,OAAzE;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACA,wBACE;AAAI,MAAA,GAAG,EAAGD,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMC,WAAN,CADF,SADF;AAeD;;AAEDK,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAkB,KAAKC,KAA7B;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAPF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BARF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBATF,CADF,CADF,eAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACID,WAAW,CAACE,GAAZ,CAAiBV,OAAD,IAAa,KAAKD,eAAL,CAAqBC,OAArB,CAA7B,CADJ,CAdF,CADF;AAoBD;;AA5DyC,C,CA+D5C;AACA;AACA;AACA;;;AAEA,MAAMW,eAAe,GAAIC,KAAD,KAAY;AAClCJ,EAAAA,WAAW,EAAEI,KAAK,CAACC,MAAN,CAAaC,QADQ,CAElC;;AAFkC,CAAZ,CAAxB;;AAKA,eAAe/B,OAAO,CAAC4B,eAAD,EAAkB,IAAlB,CAAP,CAA+B1B,aAA/B,CAAf","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\n// import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { currencies } from '../helpers/payment';\n// import '../assets/css/header.css';\n\nclass SpendigsTable extends React.Component {\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //   };\n  // }\n  // Fonte: Consultei o repositório do Davi Soares, utilizei de sua lógica e reaproveitei suas funções de conversão do valor;\n\n  formatMonetaryValue(strOrNumber) {\n    return `${Number(strOrNumber).toFixed(2)}`;\n  }\n\n  convertToBRL(exchangeRates, currency, value) {\n    const findExchangeRate = exchangeRates.find((find) => find.code === currency);\n    // console.log(findExchangeRate);\n    return (findExchangeRate.ask * value);\n  }\n\n  rederExpenseRow(expense) {\n    const { id, description, tag, method, value, currency, exchangeRates } = expense;\n    console.log(description);\n    return (\n      <tr key={ id }>\n        <td>{ description }</td>\n        {/* <td>{ tag }</td>\n        <td>{ method }</td>\n        <td>{ value }</td>\n        <td>{ currency }</td>\n        <td>{ exchangeRates }</td>\n        {/* <td>\n          { this.formatMonetaryValue(\n            this.convertToBRL(exchangeRates, currency, value),\n          ) }\n        </td> */} */}\n      </tr>\n    );\n  }\n\n  render() {\n    const { allExpenses } = this.props;\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody>\n          { allExpenses.map((expense) => this.rederExpenseRow(expense)) }\n        </tbody>\n      </table>\n    );\n  }\n}\n\n// SpendigsTable.propTypes = {\n//   userEmail: PropTypes.string.isRequired,\n//   totalExpenses: PropTypes.func.isRequired,\n// };\n\nconst mapStateToProps = (state) => ({\n  allExpenses: state.wallet.expenses,\n  // totalExpenses: state.wallet.expensesSum,\n});\n\nexport default connect(mapStateToProps, null)(SpendigsTable);\n"]},"metadata":{},"sourceType":"module"}