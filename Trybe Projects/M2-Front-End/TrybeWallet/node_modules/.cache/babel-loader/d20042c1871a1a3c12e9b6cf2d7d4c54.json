{"ast":null,"code":"var _jsxFileName = \"/home/arthur/Documents/trybe-projects/02-front-end/b15-trybeWallet/sd-015-b-project-trybewallet/src/components/SpendingsForm.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loadCurrencies, saveExpense, sumExpensies } from '../actions';\nimport requestCurrency from '../helpers/requestAPI';\nimport { categories, paymentMethod } from '../helpers/payment';\nimport convertValues from '../helpers/conversor';\nimport '../assets/css/spendingForm.css';\n\nclass SpendigForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      exchangeRates: {},\n      currNames: [],\n      totalSpendings: 0\n    };\n    this.handleInputChanges = this.handleInputChanges.bind(this);\n    this.setCurrNames = this.setCurrNames.bind(this);\n    this.sumValues = this.sumValues.bind(this);\n  }\n\n  async componentDidMount() {\n    const allCurrencies = await requestCurrency();\n    this.setCurrNames(allCurrencies);\n  }\n\n  setCurrNames(moedas) {\n    const currenciesName = Object.keys(moedas).filter(currencyFilter => currencyFilter !== 'USDT');\n    this.setState({\n      currNames: currenciesName\n    });\n  }\n\n  sumValues() {\n    const {\n      totalExpenses,\n      sumExpensies: allExpensies\n    } = this.props;\n    const convertedValues = convertValues(totalExpenses);\n    const sum = convertedValues.reduce((prev, curr) => prev + curr);\n    this.setState({\n      totalSpendings: sum,\n      value: ''\n    });\n    allExpensies(sum);\n  } ///      Handlers      ///\n\n\n  async handleSubmit() {\n    const {\n      id,\n      value,\n      currency,\n      method,\n      tag,\n      description\n    } = this.state;\n    const {\n      addExpenses\n    } = this.props;\n    const currRequest = await requestCurrency();\n    const newRegister = {\n      id,\n      value,\n      currency,\n      method,\n      tag,\n      description,\n      exchangeRates: currRequest\n    };\n    addExpenses(newRegister);\n    this.setState(previousId => ({\n      id: previousId.id + 1\n    }));\n    this.sumValues();\n  }\n\n  handleInputChanges({\n    target\n  }) {\n    const {\n      name,\n      value\n    } = target;\n    this.setState({\n      [name]: value\n    });\n  } ///      Form Fields      ///\n\n\n  spendigInput() {\n    const {\n      value\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"value-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, \"Valor:\", /*#__PURE__*/React.createElement(\"input\", {\n      name: \"value\",\n      value: value,\n      onChange: this.handleInputChanges,\n      type: \"number\",\n      placeholder: \"R$: Valor gasto.\",\n      \"data-testid\": \"value-input\",\n      id: \"value-input\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  currencyInput() {\n    const {\n      currNames\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"currency-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }\n    }, \"Moeda:\", /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"currency-input\",\n      id: \"currency-input\",\n      onChange: this.handleInputChanges,\n      name: \"currency\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, currNames.map(currencyName => /*#__PURE__*/React.createElement(\"option\", {\n      key: currencyName,\n      \"data-testid\": currencyName,\n      value: currencyName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, currencyName))));\n  }\n\n  paymentInput() {\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"payment-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    }, \"Metodo de pagamento:\", /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"method-input\",\n      id: \"payment-input\",\n      onChange: this.handleInputChanges,\n      name: \"method\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, paymentMethod.map(payment => /*#__PURE__*/React.createElement(\"option\", {\n      key: payment,\n      \"data-testid\": payment,\n      value: payment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, payment))));\n  }\n\n  tagInput() {\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"tag-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }\n    }, \"Tag:\", /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"tag-input\",\n      id: \"tag-input\",\n      onChange: this.handleInputChanges,\n      name: \"tag\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }, categories.map(categorie => /*#__PURE__*/React.createElement(\"option\", {\n      key: categorie,\n      \"data-testid\": categorie,\n      value: categorie,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }, categorie))));\n  }\n\n  descriptionInput() {\n    const {\n      description\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"description-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }\n    }, \"Descri\\xE7\\xE3o:\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Mercado, roupa, farm...\",\n      \"data-testid\": \"description-input\",\n      id: \"value-input\",\n      name: \"description\",\n      value: description,\n      onChange: this.handleInputChanges,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  saveStorage() {\n    const {\n      totalExpenses\n    } = this.props;\n    localStorage.setItem('user', JSON.stringify(totalExpenses));\n  }\n\n  render() {\n    const {\n      exchangeRates,\n      totalSpendings\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"form-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: event => {\n        event.preventDefault();\n        this.saveStorage();\n        this.handleSubmit(exchangeRates, totalSpendings);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }\n    }, this.spendigInput(), this.currencyInput(), this.paymentInput(), this.tagInput(), this.descriptionInput(), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }\n    }, \"Adicionar\")));\n  }\n\n}\n\nSpendigForm.propTypes = {\n  addExpenses: PropTypes.func.isRequired,\n  totalExpenses: PropTypes.func.isRequired,\n  sumExpensies: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  totalExpenses: state.wallet.expenses,\n  currencies: state.wallet.exchangeRates\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addExpenses: state => dispatch(saveExpense(state)),\n  loadCurrencie: state => dispatch(loadCurrencies(state)),\n  sumExpensies: state => dispatch(sumExpensies(state))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpendigForm);","map":{"version":3,"sources":["/home/arthur/Documents/trybe-projects/02-front-end/b15-trybeWallet/sd-015-b-project-trybewallet/src/components/SpendingsForm.js"],"names":["React","PropTypes","connect","loadCurrencies","saveExpense","sumExpensies","requestCurrency","categories","paymentMethod","convertValues","SpendigForm","Component","constructor","state","id","value","description","currency","method","tag","exchangeRates","currNames","totalSpendings","handleInputChanges","bind","setCurrNames","sumValues","componentDidMount","allCurrencies","moedas","currenciesName","Object","keys","filter","currencyFilter","setState","totalExpenses","allExpensies","props","convertedValues","sum","reduce","prev","curr","handleSubmit","addExpenses","currRequest","newRegister","previousId","target","name","spendigInput","currencyInput","map","currencyName","paymentInput","payment","tagInput","categorie","descriptionInput","saveStorage","localStorage","setItem","JSON","stringify","render","event","preventDefault","propTypes","func","isRequired","mapStateToProps","wallet","expenses","currencies","mapDispatchToProps","dispatch","loadCurrencie"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loadCurrencies, saveExpense, sumExpensies } from '../actions';\nimport requestCurrency from '../helpers/requestAPI';\nimport { categories, paymentMethod } from '../helpers/payment';\nimport convertValues from '../helpers/conversor';\nimport '../assets/css/spendingForm.css';\n\nclass SpendigForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      exchangeRates: {},\n      currNames: [],\n      totalSpendings: 0,\n    };\n    this.handleInputChanges = this.handleInputChanges.bind(this);\n    this.setCurrNames = this.setCurrNames.bind(this);\n    this.sumValues = this.sumValues.bind(this);\n  }\n\n  async componentDidMount() {\n    const allCurrencies = await requestCurrency();\n    this.setCurrNames(allCurrencies);\n  }\n\n  setCurrNames(moedas) {\n    const currenciesName = Object.keys(moedas)\n      .filter((currencyFilter) => currencyFilter !== 'USDT');\n\n    this.setState({ currNames: currenciesName });\n  }\n\n  sumValues() {\n    const { totalExpenses, sumExpensies: allExpensies } = this.props;\n    const convertedValues = convertValues(totalExpenses);\n    const sum = convertedValues.reduce((prev, curr) => prev + curr);\n\n    this.setState({\n      totalSpendings: sum,\n      value: '',\n    });\n    allExpensies(sum);\n  }\n\n  ///      Handlers      ///\n\n  async handleSubmit() {\n    const { id, value, currency, method, tag, description } = this.state;\n    const { addExpenses } = this.props;\n    const currRequest = await requestCurrency();\n\n    const newRegister = {\n      id,\n      value,\n      currency,\n      method,\n      tag,\n      description,\n      exchangeRates: currRequest,\n    };\n    addExpenses(newRegister);\n    this.setState((previousId) => ({ id: previousId.id + 1 }));\n\n    this.sumValues();\n  }\n\n  handleInputChanges({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  ///      Form Fields      ///\n\n  spendigInput() {\n    const { value } = this.state;\n    return (\n      <label htmlFor=\"value-input\">\n        Valor:\n        <input\n          name=\"value\"\n          value={ value }\n          onChange={ this.handleInputChanges }\n          type=\"number\"\n          placeholder=\"R$: Valor gasto.\"\n          data-testid=\"value-input\"\n          id=\"value-input\"\n          required\n        />\n      </label>\n    );\n  }\n\n  currencyInput() {\n    const { currNames } = this.state;\n    return (\n      <label htmlFor=\"currency-input\">\n        Moeda:\n        <select\n          data-testid=\"currency-input\"\n          id=\"currency-input\"\n          onChange={ this.handleInputChanges }\n          name=\"currency\"\n        >\n          {currNames.map((currencyName) => (\n            <option\n              key={ currencyName }\n              data-testid={ currencyName }\n              value={ currencyName }\n            >\n              {currencyName}\n            </option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  paymentInput() {\n    return (\n      <label htmlFor=\"payment-input\">\n        Metodo de pagamento:\n        <select\n          data-testid=\"method-input\"\n          id=\"payment-input\"\n          onChange={ this.handleInputChanges }\n          name=\"method\"\n        >\n          {paymentMethod.map((payment) => (\n            <option\n              key={ payment }\n              data-testid={ payment }\n              value={ payment }\n            >\n              {payment}\n            </option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  tagInput() {\n    return (\n      <label htmlFor=\"tag-input\">\n        Tag:\n        <select\n          data-testid=\"tag-input\"\n          id=\"tag-input\"\n          onChange={ this.handleInputChanges }\n          name=\"tag\"\n        >\n          {categories.map((categorie) => (\n            <option\n              key={ categorie }\n              data-testid={ categorie }\n              value={ categorie }\n            >\n              {categorie}\n            </option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  descriptionInput() {\n    const { description } = this.state;\n    return (\n      <label htmlFor=\"description-input\">\n        Descrição:\n        <input\n          type=\"text\"\n          placeholder=\"Mercado, roupa, farm...\"\n          data-testid=\"description-input\"\n          id=\"value-input\"\n          name=\"description\"\n          value={ description }\n          onChange={ this.handleInputChanges }\n        />\n      </label>\n    );\n  }\n\n  saveStorage() {\n    const { totalExpenses } = this.props;\n    localStorage.setItem('user', JSON.stringify(totalExpenses));\n  }\n\n  render() {\n    const { exchangeRates, totalSpendings } = this.state;\n    return (\n      <section className=\"form-section\">\n        <form\n          onSubmit={ (event) => {\n            event.preventDefault();\n            this.saveStorage();\n            this.handleSubmit(exchangeRates, totalSpendings);\n          } }\n        >\n          { this.spendigInput() }\n          { this.currencyInput() }\n          { this.paymentInput() }\n          { this.tagInput() }\n          { this.descriptionInput() }\n          <button type=\"submit\">\n            Adicionar\n          </button>\n        </form>\n      </section>\n    );\n  }\n}\n\nSpendigForm.propTypes = {\n  addExpenses: PropTypes.func.isRequired,\n  totalExpenses: PropTypes.func.isRequired,\n  sumExpensies: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  totalExpenses: state.wallet.expenses,\n  currencies: state.wallet.exchangeRates,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addExpenses: (state) => dispatch(saveExpense(state)),\n  loadCurrencie: (state) => dispatch(loadCurrencies(state)),\n  sumExpensies: (state) => dispatch(sumExpensies(state)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpendigForm);\n"]},"metadata":{},"sourceType":"module"}