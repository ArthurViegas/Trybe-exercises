{"ast":null,"code":"var _jsxFileName = \"/home/arthur/Documents/trybe-projects/02-front-end/b15-trybeWallet/sd-015-b-project-trybewallet/src/components/SpendingsForm.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loadCurrencies, saveExpense } from '../actions';\nimport requestCurrency from '../helpers/requestAPI';\nimport { categories, paymentMethod } from '../helpers/payment';\n\nclass SpendigForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      spendigs: 0,\n      currency: 'BRL',\n      payment: 'Dinheiro',\n      tag: 'Alimentação',\n      description: '',\n      initialsCurr: [],\n      allCurr: {}\n    };\n    this.handleInputChanges = this.handleInputChanges.bind(this);\n  }\n\n  async componentDidMount() {\n    const allCurrencies = await requestCurrency();\n    this.setCurrencies(allCurrencies);\n  }\n\n  setCurrencies(moedas) {\n    const {\n      loadCurrencie\n    } = this.props;\n    const currenciesName = Object.keys(moedas).filter(currencyFilter => currencyFilter !== 'USDT'); //\n\n    const currenciesObj = Object.entries(moedas); // .filter((currencyFilter) => currencyFilter !== 'USDT');\n\n    console.log(currenciesObj[0]); //\n\n    this.setState({\n      initialsCurr: currenciesName,\n      allCurr: moedas\n    });\n    loadCurrencie(moedas);\n  }\n\n  handleInputChanges({\n    target\n  }) {\n    const {\n      name,\n      value\n    } = target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  spendigInput() {\n    const {\n      spendigs\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"value-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, \"Valor:\", /*#__PURE__*/React.createElement(\"input\", {\n      name: \"spendigs\",\n      value: spendigs,\n      onChange: this.handleInputChanges,\n      type: \"number\",\n      placeholder: \"R$: Valor gasto.\",\n      \"data-testid\": \"value-input\",\n      id: \"value-input\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  currencyInput() {\n    const {\n      initialsCurr\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"currency-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, \"Moeda:\", /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"currency-input\",\n      id: \"currency-input\",\n      onChange: this.handleInputChanges,\n      name: \"currency\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, initialsCurr.map(currencyName => /*#__PURE__*/React.createElement(\"option\", {\n      key: currencyName,\n      \"data-testid\": currencyName,\n      value: currencyName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, currencyName))));\n  }\n\n  paymentInput() {\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"payment-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, \"Metodo de pagamento:\", /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"payment-input\",\n      id: \"payment-input\",\n      onChange: this.handleInputChanges,\n      name: \"payment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, paymentMethod.map(method => /*#__PURE__*/React.createElement(\"option\", {\n      key: method,\n      \"data-testid\": method,\n      value: method,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, method))));\n  }\n\n  tagInput() {\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"tag-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }\n    }, \"Tag:\", /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"tag-input\",\n      id: \"tag-input\",\n      onChange: this.handleInputChanges,\n      name: \"tag\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }, categories.map(categorie => /*#__PURE__*/React.createElement(\"option\", {\n      key: categorie,\n      \"data-testid\": categorie,\n      value: categorie,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, categorie))));\n  }\n\n  descriptionInput() {\n    const {\n      description\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"description-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 7\n      }\n    }, \"Descri\\xE7\\xE3o:\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Mercado, roupa, farm...\",\n      \"data-testid\": \"description-input\",\n      id: \"value-input\",\n      name: \"description\",\n      value: description,\n      onChange: this.handleInputChanges,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  async handleSubmit() {\n    const {\n      id,\n      spendigs,\n      currency,\n      payment,\n      tag,\n      description,\n      allCurr\n    } = this.state;\n    const {\n      addExpenses\n    } = this.props;\n    const currRequest = await requestCurrency();\n    const currencies = Object.keys(currRequest).filter(currencyFilter => currencyFilter !== 'USDT');\n    this.setState({\n      allCurr: currencies\n    });\n    const newRegister = {\n      id,\n      spendigs,\n      currency,\n      payment,\n      tag,\n      description,\n      allCurr\n    };\n    addExpenses(newRegister);\n    this.setState(previousId => ({\n      id: previousId.id + 1\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: event => {\n        event.preventDefault();\n        this.handleSubmit();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }\n    }, this.spendigInput(), this.currencyInput(), this.paymentInput(), this.tagInput(), this.descriptionInput(), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }\n    }, \"Adicionar despesa\")));\n  }\n\n}\n\nSpendigForm.propTypes = {\n  addExpenses: PropTypes.func.isRequired,\n  loadCurrencie: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  addExpenses: state => dispatch(saveExpense(state)),\n  loadCurrencie: state => dispatch(loadCurrencies(state))\n});\n\nexport default connect(null, mapDispatchToProps)(SpendigForm);","map":{"version":3,"sources":["/home/arthur/Documents/trybe-projects/02-front-end/b15-trybeWallet/sd-015-b-project-trybewallet/src/components/SpendingsForm.js"],"names":["React","PropTypes","connect","loadCurrencies","saveExpense","requestCurrency","categories","paymentMethod","SpendigForm","Component","constructor","state","id","spendigs","currency","payment","tag","description","initialsCurr","allCurr","handleInputChanges","bind","componentDidMount","allCurrencies","setCurrencies","moedas","loadCurrencie","props","currenciesName","Object","keys","filter","currencyFilter","currenciesObj","entries","console","log","setState","target","name","value","spendigInput","currencyInput","map","currencyName","paymentInput","method","tagInput","categorie","descriptionInput","handleSubmit","addExpenses","currRequest","currencies","newRegister","previousId","render","event","preventDefault","propTypes","func","isRequired","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loadCurrencies, saveExpense } from '../actions';\nimport requestCurrency from '../helpers/requestAPI';\nimport { categories, paymentMethod } from '../helpers/payment';\n\nclass SpendigForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      spendigs: 0,\n      currency: 'BRL',\n      payment: 'Dinheiro',\n      tag: 'Alimentação',\n      description: '',\n      initialsCurr: [],\n      allCurr: {},\n    };\n    this.handleInputChanges = this.handleInputChanges.bind(this);\n  }\n\n  async componentDidMount() {\n    const allCurrencies = await requestCurrency();\n    this.setCurrencies(allCurrencies);\n  }\n\n  setCurrencies(moedas) {\n    const { loadCurrencie } = this.props;\n\n    const currenciesName = Object.keys(moedas)\n      .filter((currencyFilter) => currencyFilter !== 'USDT');\n    //\n    const currenciesObj = Object.entries(moedas);\n      // .filter((currencyFilter) => currencyFilter !== 'USDT');\n    console.log(currenciesObj[0]);\n    //\n    this.setState({\n      initialsCurr: currenciesName,\n      allCurr: moedas,\n    });\n\n    loadCurrencie(moedas);\n  }\n\n  handleInputChanges({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  spendigInput() {\n    const { spendigs } = this.state;\n    return (\n      <label htmlFor=\"value-input\">\n        Valor:\n        <input\n          name=\"spendigs\"\n          value={ spendigs }\n          onChange={ this.handleInputChanges }\n          type=\"number\"\n          placeholder=\"R$: Valor gasto.\"\n          data-testid=\"value-input\"\n          id=\"value-input\"\n          required\n        />\n      </label>\n    );\n  }\n\n  currencyInput() {\n    const { initialsCurr } = this.state;\n    return (\n      <label htmlFor=\"currency-input\">\n        Moeda:\n        <select\n          data-testid=\"currency-input\"\n          id=\"currency-input\"\n          onChange={ this.handleInputChanges }\n          name=\"currency\"\n        >\n          {initialsCurr.map((currencyName) => (\n            <option\n              key={ currencyName }\n              data-testid={ currencyName }\n              value={ currencyName }\n            >\n              {currencyName}\n            </option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  paymentInput() {\n    return (\n      <label htmlFor=\"payment-input\">\n        Metodo de pagamento:\n        <select\n          data-testid=\"payment-input\"\n          id=\"payment-input\"\n          onChange={ this.handleInputChanges }\n          name=\"payment\"\n        >\n          {paymentMethod.map((method) => (\n            <option\n              key={ method }\n              data-testid={ method }\n              value={ method }\n            >\n              {method}\n            </option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  tagInput() {\n    return (\n      <label htmlFor=\"tag-input\">\n        Tag:\n        <select\n          data-testid=\"tag-input\"\n          id=\"tag-input\"\n          onChange={ this.handleInputChanges }\n          name=\"tag\"\n        >\n          {categories.map((categorie) => (\n            <option\n              key={ categorie }\n              data-testid={ categorie }\n              value={ categorie }\n            >\n              {categorie}\n            </option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  descriptionInput() {\n    const { description } = this.state;\n    return (\n      <label htmlFor=\"description-input\">\n        Descrição:\n        <input\n          type=\"text\"\n          placeholder=\"Mercado, roupa, farm...\"\n          data-testid=\"description-input\"\n          id=\"value-input\"\n          name=\"description\"\n          value={ description }\n          onChange={ this.handleInputChanges }\n        />\n      </label>\n    );\n  }\n\n  async handleSubmit() {\n    const { id, spendigs, currency, payment, tag, description, allCurr } = this.state;\n    const { addExpenses } = this.props;\n    const currRequest = await requestCurrency();\n    const currencies = Object.keys(currRequest)\n      .filter((currencyFilter) => currencyFilter !== 'USDT');\n    this.setState({ allCurr: currencies });\n    const newRegister = {\n      id,\n      spendigs,\n      currency,\n      payment,\n      tag,\n      description,\n      allCurr,\n    };\n    addExpenses(newRegister);\n    this.setState((previousId) => ({ id: previousId.id + 1 }));\n  }\n\n  render() {\n    return (\n      <section>\n        <form\n          onSubmit={ (event) => {\n            event.preventDefault();\n            this.handleSubmit();\n          } }\n        >\n          { this.spendigInput() }\n          { this.currencyInput() }\n          { this.paymentInput() }\n          { this.tagInput() }\n          { this.descriptionInput() }\n          <button type=\"submit\">\n            Adicionar despesa\n          </button>\n        </form>\n      </section>\n    );\n  }\n}\n\nSpendigForm.propTypes = {\n  addExpenses: PropTypes.func.isRequired,\n  loadCurrencie: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  addExpenses: (state) => dispatch(saveExpense(state)),\n  loadCurrencie: (state) => dispatch(loadCurrencies(state)),\n});\n\nexport default connect(null, mapDispatchToProps)(SpendigForm);\n"]},"metadata":{},"sourceType":"module"}