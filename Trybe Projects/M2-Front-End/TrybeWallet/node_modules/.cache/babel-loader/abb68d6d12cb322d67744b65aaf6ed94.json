{"ast":null,"code":"var _jsxFileName = \"/home/arthur/Documents/trybe-projects/02-front-end/b15-trybeWallet/sd-015-b-project-trybewallet/src/components/SpendingsForm.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loadCurrencies, saveExpense, sumExpensies } from '../actions';\nimport requestCurrency from '../helpers/requestAPI'; // import { categories, paymentMethod } from '../helpers/payment';\n\nimport Form from './Form';\n\nclass SpendigForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      exchangeRates: {},\n      currNames: [],\n      totalSpendings: 0\n    };\n    this.handleInputChanges = this.handleInputChanges.bind(this);\n    this.setCurrNames = this.setCurrNames.bind(this);\n    this.sumValues = this.sumValues.bind(this);\n  }\n\n  async componentDidMount() {\n    const allCurrencies = await requestCurrency();\n    this.setCurrNames(allCurrencies);\n  }\n\n  setCurrNames(moedas) {\n    const currenciesName = Object.keys(moedas).filter(currencyFilter => currencyFilter !== 'USDT');\n    this.setState({\n      currNames: currenciesName\n    });\n  }\n\n  sumValues() {\n    const {\n      totalExpenses,\n      sumExpensies: allExpensies\n    } = this.props;\n    const convertedValues = this.convertValues(totalExpenses);\n    const sum = convertedValues.reduce((prev, curr) => prev + curr);\n    this.setState({\n      totalSpendings: sum,\n      value: ''\n    });\n    allExpensies(sum);\n  }\n\n  convertValues(expenses) {\n    const exchangedCurr = expenses.map(expense => {\n      const {\n        exchangeRates,\n        value\n      } = expense;\n      const currenciesObj = Object.values(exchangeRates);\n      const thisCurr = expense.currency;\n      const exchangeCurr = currenciesObj.find(curr => curr.code === thisCurr);\n      const {\n        ask\n      } = exchangeCurr;\n      const converted = value * ask;\n      return converted;\n    });\n    return exchangedCurr;\n  } ///                                                             ///\n\n\n  handleInputChanges({\n    target\n  }) {\n    const {\n      name,\n      value\n    } = target;\n    this.setState({\n      [name]: value\n    });\n  } // spendigInput() {\n  //   const { value } = this.state;\n  //   return (\n  //     <label htmlFor=\"value-input\">\n  //       Valor:\n  //       <input\n  //         name=\"value\"\n  //         value={ value }\n  //         onChange={ this.handleInputChanges }\n  //         type=\"number\"\n  //         placeholder=\"R$: Valor gasto.\"\n  //         data-testid=\"value-input\"\n  //         id=\"value-input\"\n  //         required\n  //       />\n  //     </label>\n  //   );\n  // }\n  // currencyInput() {\n  //   const { currNames } = this.state;\n  //   return (\n  //     <label htmlFor=\"currency-input\">\n  //       Moeda:\n  //       <select\n  //         data-testid=\"currency-input\"\n  //         id=\"currency-input\"\n  //         onChange={ this.handleInputChanges }\n  //         name=\"currency\"\n  //       >\n  //         {currNames.map((currencyName) => (\n  //           <option\n  //             key={ currencyName }\n  //             data-testid={ currencyName }\n  //             value={ currencyName }\n  //           >\n  //             {currencyName}\n  //           </option>\n  //         ))}\n  //       </select>\n  //     </label>\n  //   );\n  // }\n  // paymentInput() {\n  //   return (\n  //     <label htmlFor=\"payment-input\">\n  //       Metodo de pagamento:\n  //       <select\n  //         data-testid=\"method-input\"\n  //         id=\"payment-input\"\n  //         onChange={ this.handleInputChanges }\n  //         name=\"method\"\n  //       >\n  //         {paymentMethod.map((payment) => (\n  //           <option\n  //             key={ payment }\n  //             data-testid={ payment }\n  //             value={ payment }\n  //           >\n  //             {payment}\n  //           </option>\n  //         ))}\n  //       </select>\n  //     </label>\n  //   );\n  // }\n  // tagInput() {\n  //   return (\n  //     <label htmlFor=\"tag-input\">\n  //       Tag:\n  //       <select\n  //         data-testid=\"tag-input\"\n  //         id=\"tag-input\"\n  //         onChange={ this.handleInputChanges }\n  //         name=\"tag\"\n  //       >\n  //         {categories.map((categorie) => (\n  //           <option\n  //             key={ categorie }\n  //             data-testid={ categorie }\n  //             value={ categorie }\n  //           >\n  //             {categorie}\n  //           </option>\n  //         ))}\n  //       </select>\n  //     </label>\n  //   );\n  // }\n  // descriptionInput() {\n  //   const { description } = this.state;\n  //   return (\n  //     <label htmlFor=\"description-input\">\n  //       Descrição:\n  //       <input\n  //         type=\"text\"\n  //         placeholder=\"Mercado, roupa, farm...\"\n  //         data-testid=\"description-input\"\n  //         id=\"value-input\"\n  //         name=\"description\"\n  //         value={ description }\n  //         onChange={ this.handleInputChanges }\n  //       />\n  //     </label>\n  //   );\n  // }\n\n\n  async handleSubmit() {\n    const {\n      id,\n      value,\n      currency,\n      method,\n      tag,\n      description\n    } = this.state;\n    const {\n      addExpenses\n    } = this.props;\n    const currRequest = await requestCurrency();\n    const newRegister = {\n      id,\n      value,\n      currency,\n      method,\n      tag,\n      description,\n      exchangeRates: currRequest\n    };\n    addExpenses(newRegister);\n    this.setState(previousId => ({\n      id: previousId.id + 1\n    }));\n    this.sumValues();\n  }\n\n  render() {\n    const {\n      exchangeRates,\n      totalSpendings\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      exchangeRates: exchangeRates,\n      totalSpendings: totalSpendings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nSpendigForm.propTypes = {\n  addExpenses: PropTypes.func.isRequired,\n  totalExpenses: PropTypes.func.isRequired,\n  sumExpensies: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  totalExpenses: state.wallet.expenses,\n  currencies: state.wallet.exchangeRates\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addExpenses: state => dispatch(saveExpense(state)),\n  loadCurrencie: state => dispatch(loadCurrencies(state)),\n  sumExpensies: state => dispatch(sumExpensies(state))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpendigForm);","map":{"version":3,"sources":["/home/arthur/Documents/trybe-projects/02-front-end/b15-trybeWallet/sd-015-b-project-trybewallet/src/components/SpendingsForm.js"],"names":["React","PropTypes","connect","loadCurrencies","saveExpense","sumExpensies","requestCurrency","Form","SpendigForm","Component","constructor","state","id","value","description","currency","method","tag","exchangeRates","currNames","totalSpendings","handleInputChanges","bind","setCurrNames","sumValues","componentDidMount","allCurrencies","moedas","currenciesName","Object","keys","filter","currencyFilter","setState","totalExpenses","allExpensies","props","convertedValues","convertValues","sum","reduce","prev","curr","expenses","exchangedCurr","map","expense","currenciesObj","values","thisCurr","exchangeCurr","find","code","ask","converted","target","name","handleSubmit","addExpenses","currRequest","newRegister","previousId","render","propTypes","func","isRequired","mapStateToProps","wallet","currencies","mapDispatchToProps","dispatch","loadCurrencie"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loadCurrencies, saveExpense, sumExpensies } from '../actions';\nimport requestCurrency from '../helpers/requestAPI';\n// import { categories, paymentMethod } from '../helpers/payment';\nimport Form from './Form';\n\nclass SpendigForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      exchangeRates: {},\n      currNames: [],\n      totalSpendings: 0,\n    };\n    this.handleInputChanges = this.handleInputChanges.bind(this);\n    this.setCurrNames = this.setCurrNames.bind(this);\n    this.sumValues = this.sumValues.bind(this);\n  }\n\n  async componentDidMount() {\n    const allCurrencies = await requestCurrency();\n    this.setCurrNames(allCurrencies);\n  }\n\n  setCurrNames(moedas) {\n    const currenciesName = Object.keys(moedas)\n      .filter((currencyFilter) => currencyFilter !== 'USDT');\n\n    this.setState({ currNames: currenciesName });\n  }\n\n  sumValues() {\n    const { totalExpenses, sumExpensies: allExpensies } = this.props;\n    const convertedValues = this.convertValues(totalExpenses);\n    const sum = convertedValues.reduce((prev, curr) => prev + curr);\n\n    this.setState({\n      totalSpendings: sum,\n      value: '',\n    });\n    allExpensies(sum);\n  }\n\n  convertValues(expenses) {\n    const exchangedCurr = expenses.map((expense) => {\n      const { exchangeRates, value } = expense;\n      const currenciesObj = Object.values(exchangeRates);\n      const thisCurr = expense.currency;\n      const exchangeCurr = currenciesObj.find((curr) => curr.code === thisCurr);\n      const { ask } = exchangeCurr;\n      const converted = value * ask;\n      return converted;\n    });\n    return exchangedCurr;\n  }\n\n  ///                                                             ///\n\n  handleInputChanges({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  // spendigInput() {\n  //   const { value } = this.state;\n  //   return (\n  //     <label htmlFor=\"value-input\">\n  //       Valor:\n  //       <input\n  //         name=\"value\"\n  //         value={ value }\n  //         onChange={ this.handleInputChanges }\n  //         type=\"number\"\n  //         placeholder=\"R$: Valor gasto.\"\n  //         data-testid=\"value-input\"\n  //         id=\"value-input\"\n  //         required\n  //       />\n  //     </label>\n  //   );\n  // }\n\n  // currencyInput() {\n  //   const { currNames } = this.state;\n  //   return (\n  //     <label htmlFor=\"currency-input\">\n  //       Moeda:\n  //       <select\n  //         data-testid=\"currency-input\"\n  //         id=\"currency-input\"\n  //         onChange={ this.handleInputChanges }\n  //         name=\"currency\"\n  //       >\n  //         {currNames.map((currencyName) => (\n  //           <option\n  //             key={ currencyName }\n  //             data-testid={ currencyName }\n  //             value={ currencyName }\n  //           >\n  //             {currencyName}\n  //           </option>\n  //         ))}\n  //       </select>\n  //     </label>\n  //   );\n  // }\n\n  // paymentInput() {\n  //   return (\n  //     <label htmlFor=\"payment-input\">\n  //       Metodo de pagamento:\n  //       <select\n  //         data-testid=\"method-input\"\n  //         id=\"payment-input\"\n  //         onChange={ this.handleInputChanges }\n  //         name=\"method\"\n  //       >\n  //         {paymentMethod.map((payment) => (\n  //           <option\n  //             key={ payment }\n  //             data-testid={ payment }\n  //             value={ payment }\n  //           >\n  //             {payment}\n  //           </option>\n  //         ))}\n  //       </select>\n  //     </label>\n  //   );\n  // }\n\n  // tagInput() {\n  //   return (\n  //     <label htmlFor=\"tag-input\">\n  //       Tag:\n  //       <select\n  //         data-testid=\"tag-input\"\n  //         id=\"tag-input\"\n  //         onChange={ this.handleInputChanges }\n  //         name=\"tag\"\n  //       >\n  //         {categories.map((categorie) => (\n  //           <option\n  //             key={ categorie }\n  //             data-testid={ categorie }\n  //             value={ categorie }\n  //           >\n  //             {categorie}\n  //           </option>\n  //         ))}\n  //       </select>\n  //     </label>\n  //   );\n  // }\n\n  // descriptionInput() {\n  //   const { description } = this.state;\n  //   return (\n  //     <label htmlFor=\"description-input\">\n  //       Descrição:\n  //       <input\n  //         type=\"text\"\n  //         placeholder=\"Mercado, roupa, farm...\"\n  //         data-testid=\"description-input\"\n  //         id=\"value-input\"\n  //         name=\"description\"\n  //         value={ description }\n  //         onChange={ this.handleInputChanges }\n  //       />\n  //     </label>\n  //   );\n  // }\n\n  async handleSubmit() {\n    const { id, value, currency, method, tag, description } = this.state;\n    const { addExpenses } = this.props;\n    const currRequest = await requestCurrency();\n\n    const newRegister = {\n      id,\n      value,\n      currency,\n      method,\n      tag,\n      description,\n      exchangeRates: currRequest,\n    };\n    addExpenses(newRegister);\n    this.setState((previousId) => ({ id: previousId.id + 1 }));\n\n    this.sumValues();\n  }\n\n  render() {\n    const { exchangeRates, totalSpendings } = this.state;\n    return (\n      <section>\n        <Form exchangeRates={ exchangeRates } totalSpendings={ totalSpendings } />\n        {/* <form\n          onSubmit={ (event) => {\n            event.preventDefault();\n            this.handleSubmit(exchangeRates, totalSpendings);\n          } }\n        >\n          { this.spendigInput() }\n          { this.currencyInput() }\n          { this.paymentInput() }\n          { this.tagInput() }\n          { this.descriptionInput() }\n          <button type=\"submit\">\n            Adicionar despesa\n          </button>\n        </form> */}\n      </section>\n    );\n  }\n}\n\nSpendigForm.propTypes = {\n  addExpenses: PropTypes.func.isRequired,\n  totalExpenses: PropTypes.func.isRequired,\n  sumExpensies: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  totalExpenses: state.wallet.expenses,\n  currencies: state.wallet.exchangeRates,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addExpenses: (state) => dispatch(saveExpense(state)),\n  loadCurrencie: (state) => dispatch(loadCurrencies(state)),\n  sumExpensies: (state) => dispatch(sumExpensies(state)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpendigForm);\n"]},"metadata":{},"sourceType":"module"}