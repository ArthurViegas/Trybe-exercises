{"ast":null,"code":"var _jsxFileName = \"/home/arthur/Documents/Trybe-exercises/Trybe Projects/M2-Front-End/TrybeWallet/src/components/SpendingsTable.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TableHeader from './TableHeader';\nimport '../assets/css/spendingTable.css';\nimport { saveExpense } from '../actions'; // FONTE: Consultei o repositório do Davi Soares T15 B, para realizar parte do requisito, adaptei sua lógica de implementação e utilizei as funções de conversão\n// LINK: https://github.com/tryber/sd-015-b-project-trybewallet/commit/5919b5cf9bc0b8d2196c486f81a24d9c9a5a333f\n\nclass SpendigsTable extends React.Component {\n  formatMonetaryValue(strOrNumber) {\n    return `${Number(strOrNumber).toLocaleString('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    })}`;\n  }\n\n  convertToBRL(exchangeRates, currency, value) {\n    const currenciesObj = Object.values(exchangeRates);\n    const findExchangeRate = currenciesObj.find(find => find.code === currency);\n    return findExchangeRate.ask * value;\n  }\n\n  findCurrency(exchangeRates, currency) {\n    const currenciesObj = Object.values(exchangeRates);\n    const findExchangeRate = currenciesObj.find(find => find.code === currency);\n    const exchangeRate = this.formatMonetaryValue(findExchangeRate.ask);\n    return exchangeRate;\n  }\n\n  usedCurrency(currency, exchangeRates) {\n    const currName = exchangeRates[currency].name;\n    return currName.split('/')[0];\n  }\n\n  deleteButton(id) {\n    const {\n      expenses\n    } = this.props;\n    const teste = expenses.filter(expense => expense.id !== id);\n    console.log(teste);\n  }\n\n  rederExpenseRow(expense) {\n    const {\n      id,\n      description,\n      tag,\n      method,\n      value,\n      currency,\n      exchangeRates\n    } = expense;\n    const valueToReal = `${Number(value).toLocaleString('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    })}`;\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, valueToReal), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, \"Real\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, this.formatMonetaryValue(this.convertToBRL(exchangeRates, currency, value))), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, this.usedCurrency(currency, exchangeRates)), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, this.findCurrency(exchangeRates, currency)), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, method), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, tag), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, description), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => this.deleteButton(id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, \"Remover\"));\n  }\n\n  render() {\n    const {\n      expenses\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-styles\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      cellPadding: \"2px px\",\n      cellSpacing: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TableHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, expenses.map(expense => this.rederExpenseRow(expense)))));\n  }\n\n}\n\nSpendigsTable.propTypes = {\n  expenses: PropTypes.arrayOf(Object).isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  addExpenses: state => dispatch(saveExpense(state))\n});\n\nconst mapStateToProps = state => ({\n  expenses: state.wallet.expenses\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpendigsTable);","map":{"version":3,"sources":["/home/arthur/Documents/Trybe-exercises/Trybe Projects/M2-Front-End/TrybeWallet/src/components/SpendingsTable.js"],"names":["React","PropTypes","connect","TableHeader","saveExpense","SpendigsTable","Component","formatMonetaryValue","strOrNumber","Number","toLocaleString","style","currency","convertToBRL","exchangeRates","value","currenciesObj","Object","values","findExchangeRate","find","code","ask","findCurrency","exchangeRate","usedCurrency","currName","name","split","deleteButton","id","expenses","props","teste","filter","expense","console","log","rederExpenseRow","description","tag","method","valueToReal","render","map","propTypes","arrayOf","isRequired","mapDispatchToProps","dispatch","addExpenses","state","mapStateToProps","wallet"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TableHeader from './TableHeader';\nimport '../assets/css/spendingTable.css';\nimport { saveExpense } from '../actions';\n// FONTE: Consultei o repositório do Davi Soares T15 B, para realizar parte do requisito, adaptei sua lógica de implementação e utilizei as funções de conversão\n// LINK: https://github.com/tryber/sd-015-b-project-trybewallet/commit/5919b5cf9bc0b8d2196c486f81a24d9c9a5a333f\n\nclass SpendigsTable extends React.Component {\n\n  formatMonetaryValue(strOrNumber) {\n    return `${Number(strOrNumber)\n      .toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\n  }\n\n  convertToBRL(exchangeRates, currency, value) {\n    const currenciesObj = Object.values(exchangeRates);\n    const findExchangeRate = currenciesObj.find((find) => find.code === currency);\n\n    return (findExchangeRate.ask * value);\n  }\n\n  findCurrency(exchangeRates, currency) {\n    const currenciesObj = Object.values(exchangeRates);\n    const findExchangeRate = currenciesObj.find((find) => find.code === currency);\n    const exchangeRate = this.formatMonetaryValue(findExchangeRate.ask);\n\n    return exchangeRate;\n  }\n\n  usedCurrency(currency, exchangeRates) {\n    const currName = exchangeRates[currency].name;\n    return currName.split('/')[0];\n  }\n\n  deleteButton(id) {\n    const { expenses } = this.props;\n    const teste = expenses.filter((expense) => expense.id !== id)\n    console.log(teste );\n  }\n\n  rederExpenseRow(expense) {\n    const { id, description, tag, method, value, currency, exchangeRates } = expense;\n    const valueToReal = `${Number(value)\n      .toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;\n    return (\n      <tr key={ id }>\n        <td>{ valueToReal }</td>\n        <td>\n          Real\n        </td>\n        <td>\n          { this.formatMonetaryValue(\n            this.convertToBRL(exchangeRates, currency, value),\n          ) }\n        </td>\n        <td>{ this.usedCurrency(currency, exchangeRates) }</td>\n        <td>{ this.findCurrency(exchangeRates, currency) }</td>\n        <td>{ method }</td>\n        <td>{ tag }</td>\n        <td>{ description }</td>\n        <button\n          type=\"button\"\n          onClick={() => this.deleteButton(id)}\n        >\n          Remover\n        </button>\n      </tr>\n    );\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <div className=\"table-styles\">\n        <table cellPadding=\"2px px\" cellSpacing=\"2\">\n          <TableHeader />\n          <tbody>\n            { expenses.map((expense) => this.rederExpenseRow(expense)) }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nSpendigsTable.propTypes = {\n  expenses: PropTypes.arrayOf(Object).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  addExpenses: (state) => dispatch(saveExpense(state)),\n});\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpendigsTable);\n"]},"metadata":{},"sourceType":"module"}