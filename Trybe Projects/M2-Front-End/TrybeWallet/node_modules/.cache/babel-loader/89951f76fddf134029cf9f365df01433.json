{"ast":null,"code":"import { SAVE_NEW_EXPENSE, NEW_EXPENSE } from '../actions'; // Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n\nconst INITIAL_STATE = {\n  expenses: []\n};\n\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  // const currentExpenseIndex = state.expenses.length - 1;\n  // const currentExpense = state.expenses[currentExpenseIndex];\n  // const allExpesesWithoutLast = state.expenses.slice(0, currentExpenseIndex);\n  switch (action.type) {\n    case SAVE_NEW_EXPENSE:\n      {\n        return { ...state,\n          expenses: [...action.payload]\n        };\n      }\n\n    case NEW_EXPENSE:\n      {\n        return { ...state,\n          expenses: [...state.expenses, { ...action.payload,\n            id: state.expenses.length\n          }]\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default walletReducer;","map":{"version":3,"sources":["/home/arthur/Documents/trybe-projects/02-front-end/b15-trybeWallet/sd-015-b-project-trybewallet/src/reducers/wallet.js"],"names":["SAVE_NEW_EXPENSE","NEW_EXPENSE","INITIAL_STATE","expenses","walletReducer","state","action","type","payload","id","length"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,YAA9C,C,CAEA;;AACA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,QAAQ,EAAE;AADU,CAAtB;;AAIA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGH,aAAT,EAAwBI,MAAxB,KAAmC;AACvD;AACA;AACA;AACA,UAAQA,MAAM,CAACC,IAAf;AACA,SAAKP,gBAAL;AAAuB;AACrB,eAAO,EACL,GAAGK,KADE;AAELF,UAAAA,QAAQ,EAAE,CACR,GAAGG,MAAM,CAACE,OADF;AAFL,SAAP;AAMD;;AACD,SAAKP,WAAL;AAAkB;AAChB,eAAO,EACL,GAAGI,KADE;AAELF,UAAAA,QAAQ,EAAE,CACR,GAAGE,KAAK,CAACF,QADD,EAER,EAAE,GAAGG,MAAM,CAACE,OAAZ;AAAqBC,YAAAA,EAAE,EAAEJ,KAAK,CAACF,QAAN,CAAeO;AAAxC,WAFQ;AAFL,SAAP;AAOD;;AACD;AACE,aAAOL,KAAP;AAnBF;AAqBD,CAzBD;;AA2BA,eAAeD,aAAf","sourcesContent":["import { SAVE_NEW_EXPENSE, NEW_EXPENSE } from '../actions';\n\n// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nconst INITIAL_STATE = {\n  expenses: [],\n};\n\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  // const currentExpenseIndex = state.expenses.length - 1;\n  // const currentExpense = state.expenses[currentExpenseIndex];\n  // const allExpesesWithoutLast = state.expenses.slice(0, currentExpenseIndex);\n  switch (action.type) {\n  case SAVE_NEW_EXPENSE: {\n    return {\n      ...state,\n      expenses: [\n        ...action.payload,\n      ],\n    };\n  }\n  case NEW_EXPENSE: {\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        { ...action.payload, id: state.expenses.length },\n      ],\n    };\n  }\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n"]},"metadata":{},"sourceType":"module"}