{"ast":null,"code":"var _jsxFileName = \"/home/arthur/Documents/trybe-projects/02-front-end/b15-trybeWallet/sd-015-b-project-trybewallet/src/components/SpendingsForm.js\";\n\n/* eslint-disable no-shadow */\n\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loadCurrencies, saveExpense, sumExpensies } from '../actions';\nimport requestCurrency from '../helpers/requestAPI';\nimport { categories, paymentMethod } from '../helpers/payment';\n\nclass SpendigForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      initialsCurr: [],\n      exchangeRates: {}\n    };\n    this.handleInputChanges = this.handleInputChanges.bind(this);\n  }\n\n  async componentDidMount() {\n    const allCurrencies = await requestCurrency();\n  } // removeUSDT(moedas) {\n  //   const currenciesName = Object.keys(moedas)\n  //     .filter((currencyFilter) => currencyFilter !== 'USDT');\n  //   const currenciesObj = Object.values(moedas)\n  //     .filter((currencyFilter) => currencyFilter.codein !== 'BRLT');\n  // }\n\n\n  handleInputChanges({\n    target\n  }) {\n    const {\n      name,\n      value\n    } = target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  spendigInput() {\n    const {\n      value\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"value-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, \"Valor:\", /*#__PURE__*/React.createElement(\"input\", {\n      name: \"value\",\n      value: value,\n      onChange: this.handleInputChanges,\n      type: \"number\",\n      placeholder: \"R$: Valor gasto.\",\n      \"data-testid\": \"value-input\",\n      id: \"value-input\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  currencyInput() {\n    const {\n      initialsCurr\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"currency-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, \"Moeda:\", /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"currency-input\",\n      id: \"currency-input\",\n      onChange: this.handleInputChanges,\n      name: \"currency\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, initialsCurr.map(currencyName => /*#__PURE__*/React.createElement(\"option\", {\n      key: currencyName,\n      \"data-testid\": currencyName,\n      value: currencyName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, currencyName))));\n  }\n\n  paymentInput() {\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"method-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    }, \"Metodo de pagamento:\", /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"method-input\",\n      id: \"payment-input\",\n      onChange: this.handleInputChanges,\n      name: \"method\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, paymentMethod.map(payment => /*#__PURE__*/React.createElement(\"option\", {\n      key: payment,\n      \"data-testid\": payment,\n      value: payment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }, payment))));\n  }\n\n  tagInput() {\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"tag-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, \"Tag:\", /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"tag-input\",\n      id: \"tag-input\",\n      onChange: this.handleInputChanges,\n      name: \"tag\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, categories.map(categorie => /*#__PURE__*/React.createElement(\"option\", {\n      key: categorie,\n      \"data-testid\": categorie,\n      value: categorie,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, categorie))));\n  }\n\n  descriptionInput() {\n    const {\n      description\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"description-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }\n    }, \"Descri\\xE7\\xE3o:\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Mercado, roupa, farm...\",\n      \"data-testid\": \"description-input\",\n      id: \"value-input\",\n      name: \"description\",\n      value: description,\n      onChange: this.handleInputChanges,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  async handleSubmit() {\n    const {\n      id,\n      value,\n      currency,\n      method,\n      tag,\n      description,\n      exchangeRates\n    } = this.state;\n    const {\n      addExpenses,\n      sumExpensies\n    } = this.props;\n    const currRequest = await requestCurrency();\n    const currencies = Object.keys(currRequest).filter(currencyFilter => currencyFilter !== 'USDT');\n    console.log(currencies);\n    this.setState({\n      exchangeRates: currencies\n    });\n    const newRegister = {\n      id,\n      value,\n      currency,\n      method,\n      tag,\n      description,\n      exchangeRates\n    };\n    addExpenses(newRegister);\n    this.setState(previousId => ({\n      id: previousId.id + 1\n    }));\n    const button = document.getElementById('value-input');\n    button.value = ''; // this.summAllSpendigns();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: event => {\n        event.preventDefault();\n        this.handleSubmit();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }\n    }, this.spendigInput(), this.currencyInput(), this.paymentInput(), this.tagInput(), this.descriptionInput(), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }\n    }, \"Adicionar despesa\")));\n  }\n\n}\n\nSpendigForm.propTypes = {\n  addExpenses: PropTypes.func.isRequired,\n  loadCurrencie: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  totalExpenses: state.wallet.expenses,\n  currencies: state.wallet.exchangeRates\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addExpenses: state => dispatch(saveExpense(state)),\n  loadCurrencie: state => dispatch(loadCurrencies(state)),\n  sumExpensies: state => dispatch(sumExpensies(state))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpendigForm);","map":{"version":3,"sources":["/home/arthur/Documents/trybe-projects/02-front-end/b15-trybeWallet/sd-015-b-project-trybewallet/src/components/SpendingsForm.js"],"names":["React","PropTypes","connect","loadCurrencies","saveExpense","sumExpensies","requestCurrency","categories","paymentMethod","SpendigForm","Component","constructor","state","id","value","description","currency","method","tag","initialsCurr","exchangeRates","handleInputChanges","bind","componentDidMount","allCurrencies","target","name","setState","spendigInput","currencyInput","map","currencyName","paymentInput","payment","tagInput","categorie","descriptionInput","handleSubmit","addExpenses","props","currRequest","currencies","Object","keys","filter","currencyFilter","console","log","newRegister","previousId","button","document","getElementById","render","event","preventDefault","propTypes","func","isRequired","loadCurrencie","mapStateToProps","totalExpenses","wallet","expenses","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loadCurrencies, saveExpense, sumExpensies } from '../actions';\nimport requestCurrency from '../helpers/requestAPI';\nimport { categories, paymentMethod } from '../helpers/payment';\n\nclass SpendigForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      initialsCurr: [],\n      exchangeRates: {},\n    };\n    this.handleInputChanges = this.handleInputChanges.bind(this);\n  }\n\n  async componentDidMount() {\n    const allCurrencies = await requestCurrency();\n  }\n\n  // removeUSDT(moedas) {\n  //   const currenciesName = Object.keys(moedas)\n  //     .filter((currencyFilter) => currencyFilter !== 'USDT');\n  //   const currenciesObj = Object.values(moedas)\n  //     .filter((currencyFilter) => currencyFilter.codein !== 'BRLT');\n\n  // }\n\n  handleInputChanges({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  spendigInput() {\n    const { value } = this.state;\n    return (\n      <label htmlFor=\"value-input\">\n        Valor:\n        <input\n          name=\"value\"\n          value={ value }\n          onChange={ this.handleInputChanges }\n          type=\"number\"\n          placeholder=\"R$: Valor gasto.\"\n          data-testid=\"value-input\"\n          id=\"value-input\"\n          required\n        />\n      </label>\n    );\n  }\n\n  currencyInput() {\n    const { initialsCurr } = this.state;\n    return (\n      <label htmlFor=\"currency-input\">\n        Moeda:\n        <select\n          data-testid=\"currency-input\"\n          id=\"currency-input\"\n          onChange={ this.handleInputChanges }\n          name=\"currency\"\n        >\n          {initialsCurr.map((currencyName) => (\n            <option\n              key={ currencyName }\n              data-testid={ currencyName }\n              value={ currencyName }\n            >\n              {currencyName}\n            </option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  paymentInput() {\n    return (\n      <label htmlFor=\"method-input\">\n        Metodo de pagamento:\n        <select\n          data-testid=\"method-input\"\n          id=\"payment-input\"\n          onChange={ this.handleInputChanges }\n          name=\"method\"\n        >\n          {paymentMethod.map((payment) => (\n            <option\n              key={ payment }\n              data-testid={ payment }\n              value={ payment }\n            >\n              {payment}\n            </option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  tagInput() {\n    return (\n      <label htmlFor=\"tag-input\">\n        Tag:\n        <select\n          data-testid=\"tag-input\"\n          id=\"tag-input\"\n          onChange={ this.handleInputChanges }\n          name=\"tag\"\n        >\n          {categories.map((categorie) => (\n            <option\n              key={ categorie }\n              data-testid={ categorie }\n              value={ categorie }\n            >\n              {categorie}\n            </option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  descriptionInput() {\n    const { description } = this.state;\n    return (\n      <label htmlFor=\"description-input\">\n        Descrição:\n        <input\n          type=\"text\"\n          placeholder=\"Mercado, roupa, farm...\"\n          data-testid=\"description-input\"\n          id=\"value-input\"\n          name=\"description\"\n          value={ description }\n          onChange={ this.handleInputChanges }\n        />\n      </label>\n    );\n  }\n\n  async handleSubmit() {\n    const { id, value, currency, method, tag, description, exchangeRates } = this.state;\n    const { addExpenses, sumExpensies } = this.props;\n    const currRequest = await requestCurrency();\n    const currencies = Object.keys(currRequest)\n      .filter((currencyFilter) => currencyFilter !== 'USDT');\n    console.log(currencies);\n    this.setState({ exchangeRates: currencies });\n    const newRegister = {\n      id,\n      value,\n      currency,\n      method,\n      tag,\n      description,\n      exchangeRates,\n    };\n    addExpenses(newRegister);\n    this.setState((previousId) => ({ id: previousId.id + 1 }));\n    const button = document.getElementById('value-input');\n    button.value = '';\n    // this.summAllSpendigns();\n  }\n\n  render() {\n    return (\n      <section>\n        <form\n          onSubmit={ (event) => {\n            event.preventDefault();\n            this.handleSubmit();\n          } }\n        >\n          { this.spendigInput() }\n          { this.currencyInput() }\n          { this.paymentInput() }\n          { this.tagInput() }\n          { this.descriptionInput() }\n          <button type=\"submit\">\n            Adicionar despesa\n          </button>\n        </form>\n      </section>\n    );\n  }\n}\n\nSpendigForm.propTypes = {\n  addExpenses: PropTypes.func.isRequired,\n  loadCurrencie: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  totalExpenses: state.wallet.expenses,\n  currencies: state.wallet.exchangeRates,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addExpenses: (state) => dispatch(saveExpense(state)),\n  loadCurrencie: (state) => dispatch(loadCurrencies(state)),\n  sumExpensies: (state) => dispatch(sumExpensies(state)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpendigForm);\n"]},"metadata":{},"sourceType":"module"}